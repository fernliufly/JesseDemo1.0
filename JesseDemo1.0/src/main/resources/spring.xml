<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:tx="http://www.springframework.org/schema/tx" 
xmlns:aop="http://www.springframework.org/schema/aop" 
xmlns:context="http://www.springframework.org/schema/context" 
xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-4.3.xsd
">

	
	<!-- <import resource="classpath:/spring/spring-quartz.xml" />  -->

	<!-- 自动扫描dao和service包(自动注入) -->
	<context:component-scan base-package="com.zmt.dao,com.zmt.service,com.wu.common.cache.redis*" />
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />

    <!--0. 添加propertyConfigurer bean 这个类也是Spring提供的 -->
        <!-- 把properties文件的路径注入给location属性，前面要加classpath: -->
 <!--    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:/config/config.properties"/>
    </bean> -->
    
	<!-- 1. 数据源 : DriverManagerDataSource   com.mysql.jdbc.Driver -->  
 

    <bean id="prop" class="com.zmt.TestProperty">
        <property name="username" value="${jdbc_username}" />  
		<property name="driverClassName" value="${jdbc.url}" />  
	</bean>
  <bean id="dataSource"  
        class="com.alibaba.druid.pool.DruidDataSource">  
       <!--  <property name="driverClassName" value="com.mysql.jdbc.Driver" />   -->
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis" />  
        <property name="username" value="${jdbc_username}" />  
        <property name="password" value="123abc" />  
  </bean>
    <!--  
        2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源  
  
        MyBatis定义数据源,同意加载配置  
    -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="configLocation" value="classpath:config/mybatis-config.xml" />   
    </bean>  
    
        <!--  
        3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory  
  
        basePackage:指定sql映射文件/接口所在的包（自动扫描）  
    -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.zmt.*"></property>  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
       <!--  <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>   -->
    </bean>  
  
    <!-- 
        4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 
    -->  
    <bean id="txManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean>  
  
    <!-- 5. 使用声明式事务  
         transaction-manager：引用上面定义的事务管理器  
     -->  
    <tx:annotation-driven transaction-manager="txManager" />  
</beans>